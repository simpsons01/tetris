(()=>{"use strict";var o,t,n,e,i,r,a,l,c,s,y,h,u,p,f,d,m={758:(o,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BaseComponent=t.BaseCanvas=void 0;var n=function(){function o(o){this.width=o.width,this.height=o.height,this.context=o.context}return o.prototype.draw=function(){},o}();t.BaseCanvas=n;var e=function(){function o(t){var n=o.borderWidth,e=o.borders;this.x=t.x,this.y=t.y,this.width=t.width+e*n*2,this.height=t.height+e*n*2,this.baseCanvasConstructor=t.baseCanvasConstructor}return o.prototype.mount=function(){var t=o.borderWidth,n=o.borders,e=document.querySelector("#canvas-container"),i=document.createElement("div");i.classList.add("frame"),[{key:"left",value:"".concat(this.x,"px")},{key:"top",value:"".concat(this.y,"px")},{key:"width",value:"".concat(this.width,"px")},{key:"height",value:"".concat(this.height,"px")}].forEach((function(o){var t=o.key,n=o.value;i.style[t]=n}));var r=document.createElement("canvas"),a=r.getContext("2d");return[{key:"height",value:"".concat(this.height-n*t*2,"px")},{key:"width",value:"".concat(this.width-n*t*2,"px")}].forEach((function(o){var t=o.key,n=o.value;r.setAttribute(t,n)})),i.appendChild(r),e.appendChild(i),new this.baseCanvasConstructor({width:this.width-n*t*2,height:this.height-n*t*2,context:a})},o.borders=3,o.borderWidth=4,o}();t.BaseComponent=e},465:(o,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Game=void 0;var e=n(668),i=n(166),r=new e.CountDownTimer(.5,!0),a=new e.CountDownTimer(1.5),l=new e.IntervalTimer(.8),c=function(){function o(o,t,n){this.isPending=!1,this.tetris=o,this.score=t,this.lineUp=n}return o.prototype.onPolyominCoordinateChange=function(){this.tetris.getPolyominoCollideStatus().bottom?(this.closePolyominoAutoFall(),this.isPending?this.startNextRoundTimer():(this.startNextRoundCountDownTimer(),this.startNextRoundTimer(),this.isPending=!0)):this.isPending&&(this.startPolyominoAutoFall(),this.closeNextRoundCountDownTimer(),this.closeNextRoundTimer())},o.prototype.movePolyominoRight=function(){this.tetris.polyomino&&this.tetris.movePolyomino(i.Direction.Right)&&this.onPolyominCoordinateChange()},o.prototype.movePolyominoLeft=function(){this.tetris.polyomino&&this.tetris.movePolyomino(i.Direction.Left)&&this.onPolyominCoordinateChange()},o.prototype.movePolyominoDown=function(){this.tetris.polyomino&&this.tetris.movePolyomino(i.Direction.Down)&&this.onPolyominCoordinateChange()},o.prototype.movePolyominoQuick=function(){this.tetris.polyomino&&(this.tetris.placePolyominoToPreview(),this.onPolyominCoordinateChange())},o.prototype.changePolyominoShape=function(){this.tetris.polyomino&&this.tetris.changePolyominoShape()&&this.onPolyominCoordinateChange()},o.prototype.startPolyominoAutoFall=function(){var o=this;l.start((function(){o.movePolyominoDown()}))},o.prototype.closePolyominoAutoFall=function(){l.close()},o.prototype.startNextRoundCountDownTimer=function(){var o=this;a.start((function(){o.isPending&&(o.closeNextRoundTimer(),o.tetris.getPolyominoCollideStatus().bottom?o.beforeNextRound().then((function(){o.nextRound()})):(o.isPending=!1,o.startPolyominoAutoFall()))}))},o.prototype.closeNextRoundCountDownTimer=function(){a.close()},o.prototype.startNextRoundTimer=function(){var o=this;r.start((function(){o.tetris.getPolyominoCollideStatus().bottom?o.beforeNextRound().then((function(){o.nextRound()})):(o.isPending=!1,o.startPolyominoAutoFall())}))},o.prototype.closeNextRoundTimer=function(){r.close()},o.prototype.beforeNextRound=function(){var o=this;return new Promise((function(t){o.tetris.syncPolyominoInfoToData(),o.tetris.resetPolyomino();var n=o.tetris.getFilledRowInedxList();n.length>0?(o.score.updateScore(n.length),o.tetris.clearFilledRow().then((function(){return o.tetris.fillEmptyRow()})).then((function(){t()}))):t()}))},o.prototype.nextRound=function(){this.tetris.setPolyomino(this.lineUp.first),this.tetris.placePolyominoToCenterTop(),this.lineUp.next(),this.isGameOver()?console.log("game is over"):(this.isPending=!1,this.startPolyominoAutoFall())},o.prototype.isGameOver=function(){var o=this.tetris.getPolyominoCollideStatus(),t=o.top,n=o.bottom;return t&&n},o.prototype.start=function(){this.tetris.setPolyomino(this.lineUp.first),this.tetris.placePolyominoToCenterTop(),this.lineUp.next(),this.startPolyominoAutoFall()},o.prototype.pause=function(){this.closePolyominoAutoFall()},o}();t.Game=c},610:function(o,t,n){var e=this&&this.__createBinding||(Object.create?function(o,t,n,e){void 0===e&&(e=n),Object.defineProperty(o,e,{enumerable:!0,get:function(){return t[n]}})}:function(o,t,n,e){void 0===e&&(e=n),o[e]=t[n]}),i=this&&this.__exportStar||function(o,t){for(var n in o)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||e(t,o,n)};Object.defineProperty(t,"__esModule",{value:!0}),i(n(465),t)},702:function(o,t,n){var e,i=this&&this.__extends||(e=function(o,t){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(o,t){o.__proto__=t}||function(o,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(o[n]=t[n])},e(o,t)},function(o,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=o}e(o,t),o.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.LineUp=void 0;var r=n(621),a=n(758),l=n(166),c=function(o){function t(n){var e=o.call(this,n)||this;return e.list=new Array(t.lineLimit).fill(null).map((function(){return{polyomino:null,type:null}})),e.polyominoFactory=new r.PolyominoFactory,e.init(),e}return i(t,o),Object.defineProperty(t.prototype,"first",{get:function(){return this.list.shift().polyomino},enumerable:!1,configurable:!0}),t.prototype.ramdomCreate=function(){var o=0+Math.round(Math.random()*t.types.length),n=t.types[o];return{type:n,polyomino:this.polyominoFactory.create(n)}},t.prototype.init=function(){var o=this;this.list.forEach((function(t,n){var e=o.ramdomCreate(),i=e.type,r=e.polyomino;t.polyomino=r,t.type=i})),this.draw()},t.prototype.next=function(){var o=this;this.list.push(function(){for(var t=null,n=null;!n||o.list.findIndex((function(o){return o.type===t}))>-1;){var e=o.ramdomCreate(),i=e.type,r=e.polyomino;t=i,n=r}return{type:t,polyomino:n}}()),this.draw()},t.prototype.draw=function(){var o=this;this.context.clearRect(0,0,this.width,this.height),this.context.fillStyle="#292929",this.context.fillRect(0,0,this.width,this.height),this.list.forEach((function(n,e){var i=n.polyomino,r=i.range,a=r.minX,c=r.maxX,s=r.minY,y=r.maxY,h=i.anchor,u=(c-a+1)*l.BlcokDistance,p=(y-s+1)*l.BlcokDistance,f=o.height/t.lineLimit,d=(h.x-a)*l.BlcokDistance,m=(h.y-s)*l.BlcokDistance,x=((o.width-u)/2+d)/l.BlcokDistance,v=((f-p)/2+m)/l.BlcokDistance;i.calcInfo(i.calcCoordinateByAnchorandShape({x,y:v},i.shape)).forEach((function(t){var n=t.x,i=t.y,r=t.strokeColor,a=t.fillColor;o.context.strokeStyle=r,o.context.fillStyle=a,o.context.save(),o.context.fillRect(n*l.BlcokDistance,i*l.BlcokDistance+e*f,l.BlcokDistance-2,l.BlcokDistance-2),o.context.strokeRect(n*l.BlcokDistance,i*l.BlcokDistance+e*f,l.BlcokDistance,l.BlcokDistance),o.context.restore()}))}))},t.types=["I","J","L","O","S","T","Z"],t.lineLimit=3,t}(a.BaseCanvas);t.LineUp=c},788:function(o,t,n){var e=this&&this.__assign||function(){return e=Object.assign||function(o){for(var t,n=1,e=arguments.length;n<e;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(o[i]=t[i]);return o},e.apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.BasePolyomino=void 0;var i=n(166),r=n(668),a=function(){function o(o,t){this.shape=i.PolyominoShape.First,this.coordinateConfig=o,this.strokeColor=t.strokeColor,this.fillColor=t.fillColor,this.coordinate=(0,r.deepColne)(this.coordinateConfig[this.shape].coordinate)}return Object.defineProperty(o.prototype,"anchor",{get:function(){return this.calcAnchorByCoordinateAndShape(this.coordinate,this.shape)},enumerable:!1,configurable:!0}),Object.defineProperty(o.prototype,"range",{get:function(){return this.calcRangeByCoordinate(this.coordinate)},enumerable:!1,configurable:!0}),Object.defineProperty(o.prototype,"info",{get:function(){return this.calcInfo(this.coordinate)},enumerable:!1,configurable:!0}),o.prototype.calcCoordinateByAnchorandShape=function(o,t){return this.coordinateConfig[t].coordinate.map((function(t){var n=t.x,e=t.y;return{x:n+o.x,y:e+o.y}}))},o.prototype.calcAnchorByCoordinateAndShape=function(o,t){return o[this.coordinateConfig[t].anchorIndex]},o.prototype.calcInfo=function(o){var t=this;return o.map((function(o){return e(e({},o),{strokeColor:t.strokeColor,fillColor:t.fillColor})}))},o.prototype.calcRangeByCoordinate=function(o){var t=o.map((function(o){return o.x})),n=o.map((function(o){return o.y}));return{maxX:Math.max.apply(Math,t),minX:Math.min.apply(Math,t),maxY:Math.max.apply(Math,n),minY:Math.min.apply(Math,n)}},o.prototype.updateCoordinate=function(o){return this.coordinate=this.calcCoordinateByAnchorandShape(o,this.shape),this.coordinate},o.prototype.changeShape=function(o){this.shape=o;var t=this.anchor;return this.updateCoordinate(t),this.coordinate},o}();t.BasePolyomino=a},392:function(o,t,n){var e,i=this&&this.__extends||(e=function(o,t){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(o,t){o.__proto__=t}||function(o,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(o[n]=t[n])},e(o,t)},function(o,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=o}e(o,t),o.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.IPolyomino=void 0;var r=n(166),a=function(o){function t(){var t;return o.call(this,((t={})[r.PolyominoShape.First]={anchorIndex:1,coordinate:[{x:0,y:-1},{x:0,y:0},{x:0,y:1},{x:0,y:2}]},t[r.PolyominoShape.Second]={anchorIndex:1,coordinate:[{x:-1,y:0},{x:0,y:0},{x:1,y:0},{x:2,y:0}]},t[r.PolyominoShape.Third]={anchorIndex:1,coordinate:[{x:0,y:-1},{x:0,y:0},{x:0,y:1},{x:0,y:2}]},t[r.PolyominoShape.Forth]={anchorIndex:1,coordinate:[{x:-1,y:0},{x:0,y:0},{x:1,y:0},{x:2,y:0}]},t),{strokeColor:"#292929",fillColor:"#00BB00"})||this}return i(t,o),t}(n(788).BasePolyomino);t.IPolyomino=a},627:function(o,t,n){var e,i=this&&this.__extends||(e=function(o,t){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(o,t){o.__proto__=t}||function(o,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(o[n]=t[n])},e(o,t)},function(o,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=o}e(o,t),o.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.JPolyomino=void 0;var r=n(166),a=function(o){function t(){var t;return o.call(this,((t={})[r.PolyominoShape.First]={anchorIndex:2,coordinate:[{x:-1,y:1},{x:0,y:1},{x:0,y:0},{x:0,y:-1}]},t[r.PolyominoShape.Second]={anchorIndex:2,coordinate:[{x:-1,y:-1},{x:-1,y:0},{x:0,y:0},{x:1,y:0}]},t[r.PolyominoShape.Third]={anchorIndex:2,coordinate:[{x:1,y:-1},{x:0,y:-1},{x:0,y:0},{x:0,y:1}]},t[r.PolyominoShape.Forth]={anchorIndex:2,coordinate:[{x:-1,y:0},{x:1,y:0},{x:0,y:0},{x:1,y:1}]},t),{strokeColor:"#292929",fillColor:"#A6A600"})||this}return i(t,o),t}(n(788).BasePolyomino);t.JPolyomino=a},729:function(o,t,n){var e,i=this&&this.__extends||(e=function(o,t){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(o,t){o.__proto__=t}||function(o,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(o[n]=t[n])},e(o,t)},function(o,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=o}e(o,t),o.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.LPolyomino=void 0;var r=n(166),a=function(o){function t(){var t;return o.call(this,((t={})[r.PolyominoShape.First]={anchorIndex:2,coordinate:[{x:0,y:-1},{x:0,y:1},{x:0,y:0},{x:1,y:1}]},t[r.PolyominoShape.Second]={anchorIndex:2,coordinate:[{x:-1,y:1},{x:-1,y:0},{x:0,y:0},{x:1,y:0}]},t[r.PolyominoShape.Third]={anchorIndex:2,coordinate:[{x:-1,y:-1},{x:0,y:-1},{x:0,y:0},{x:0,y:1}]},t[r.PolyominoShape.Forth]={anchorIndex:2,coordinate:[{x:-1,y:0},{x:1,y:0},{x:0,y:0},{x:1,y:-1}]},t),{strokeColor:"#292929",fillColor:"#C6A300"})||this}return i(t,o),t}(n(788).BasePolyomino);t.LPolyomino=a},611:function(o,t,n){var e,i=this&&this.__extends||(e=function(o,t){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(o,t){o.__proto__=t}||function(o,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(o[n]=t[n])},e(o,t)},function(o,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=o}e(o,t),o.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.OPolyomino=void 0;var r=n(166),a=function(o){function t(){var t;return o.call(this,((t={})[r.PolyominoShape.First]={anchorIndex:3,coordinate:[{x:-1,y:-1},{x:0,y:-1},{x:-1,y:0},{x:0,y:0}]},t[r.PolyominoShape.Second]={anchorIndex:3,coordinate:[{x:-1,y:-1},{x:0,y:-1},{x:-1,y:0},{x:0,y:0}]},t[r.PolyominoShape.Third]={anchorIndex:3,coordinate:[{x:-1,y:-1},{x:0,y:-1},{x:-1,y:0},{x:0,y:0}]},t[r.PolyominoShape.Forth]={anchorIndex:3,coordinate:[{x:-1,y:-1},{x:0,y:-1},{x:-1,y:0},{x:0,y:0}]},t),{strokeColor:"#292929",fillColor:"#FF7575"})||this}return i(t,o),t}(n(788).BasePolyomino);t.OPolyomino=a},720:function(o,t,n){var e,i=this&&this.__extends||(e=function(o,t){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(o,t){o.__proto__=t}||function(o,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(o[n]=t[n])},e(o,t)},function(o,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=o}e(o,t),o.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.SPolyomino=void 0;var r=n(166),a=function(o){function t(){var t;return o.call(this,((t={})[r.PolyominoShape.First]={anchorIndex:1,coordinate:[{x:-1,y:0},{x:0,y:0},{x:0,y:-1},{x:1,y:-1}]},t[r.PolyominoShape.Second]={anchorIndex:1,coordinate:[{x:-1,y:0},{x:0,y:0},{x:-1,y:-1},{x:0,y:1}]},t[r.PolyominoShape.Third]={anchorIndex:1,coordinate:[{x:-1,y:0},{x:0,y:0},{x:0,y:-1},{x:1,y:-1}]},t[r.PolyominoShape.Forth]={anchorIndex:1,coordinate:[{x:-1,y:0},{x:0,y:0},{x:-1,y:-1},{x:0,y:1}]},t),{strokeColor:"#292929",fillColor:"#00CACA"})||this}return i(t,o),t}(n(788).BasePolyomino);t.SPolyomino=a},264:function(o,t,n){var e,i=this&&this.__extends||(e=function(o,t){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(o,t){o.__proto__=t}||function(o,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(o[n]=t[n])},e(o,t)},function(o,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=o}e(o,t),o.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.TPolyomino=void 0;var r=n(166),a=function(o){function t(){var t;return o.call(this,((t={})[r.PolyominoShape.First]={anchorIndex:1,coordinate:[{x:-1,y:0},{x:0,y:0},{x:1,y:0},{x:0,y:1}]},t[r.PolyominoShape.Second]={anchorIndex:1,coordinate:[{x:-1,y:0},{x:0,y:0},{x:0,y:1},{x:0,y:-1}]},t[r.PolyominoShape.Third]={anchorIndex:1,coordinate:[{x:-1,y:0},{x:0,y:0},{x:1,y:0},{x:0,y:-1}]},t[r.PolyominoShape.Forth]={anchorIndex:1,coordinate:[{x:0,y:-1},{x:0,y:0},{x:0,y:1},{x:1,y:0}]},t),{strokeColor:"#292929",fillColor:"#0072E3"})||this}return i(t,o),t}(n(788).BasePolyomino);t.TPolyomino=a},985:function(o,t,n){var e,i=this&&this.__extends||(e=function(o,t){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(o,t){o.__proto__=t}||function(o,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(o[n]=t[n])},e(o,t)},function(o,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=o}e(o,t),o.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.ZPolyomino=void 0;var r=n(166),a=function(o){function t(){var t;return o.call(this,((t={})[r.PolyominoShape.First]={anchorIndex:2,coordinate:[{x:-1,y:0},{x:0,y:1},{x:0,y:0},{x:1,y:1}]},t[r.PolyominoShape.Second]={anchorIndex:2,coordinate:[{x:-1,y:-1},{x:-1,y:0},{x:0,y:0},{x:0,y:1}]},t[r.PolyominoShape.Third]={anchorIndex:2,coordinate:[{x:-1,y:0},{x:0,y:1},{x:0,y:0},{x:1,y:1}]},t[r.PolyominoShape.Forth]={anchorIndex:2,coordinate:[{x:-1,y:-1},{x:-1,y:0},{x:0,y:0},{x:0,y:1}]},t),{strokeColor:"#292929",fillColor:"#8080C0"})||this}return i(t,o),t}(n(788).BasePolyomino);t.ZPolyomino=a},137:(o,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.PolyominoFactory=void 0;var e=n(392),i=n(627),r=n(729),a=n(611),l=n(720),c=n(264),s=n(985),y=function(){function o(){}return o.prototype.create=function(o){var t={I:e.IPolyomino,J:i.JPolyomino,L:r.LPolyomino,O:a.OPolyomino,S:l.SPolyomino,T:c.TPolyomino,Z:s.ZPolyomino};return new(t[o]?t[o]:e.IPolyomino)},o}();t.PolyominoFactory=y},621:function(o,t,n){var e=this&&this.__createBinding||(Object.create?function(o,t,n,e){void 0===e&&(e=n),Object.defineProperty(o,e,{enumerable:!0,get:function(){return t[n]}})}:function(o,t,n,e){void 0===e&&(e=n),o[e]=t[n]}),i=this&&this.__exportStar||function(o,t){for(var n in o)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||e(t,o,n)};Object.defineProperty(t,"__esModule",{value:!0}),i(n(788),t),i(n(137),t)},362:function(o,t,n){var e,i=this&&this.__extends||(e=function(o,t){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(o,t){o.__proto__=t}||function(o,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(o[n]=t[n])},e(o,t)},function(o,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=o}e(o,t),o.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.Score=void 0;var r=function(o){function t(){var t=null!==o&&o.apply(this,arguments)||this;return t.score=0,t}return i(t,o),t.prototype.updateScore=function(o){this.score+=o,this.draw()},t.prototype.draw=function(){this.context.clearRect(0,0,this.width,this.height),this.context.fillStyle="#292929",this.context.fillRect(0,0,this.width,this.height),this.context.font="35px Arial",this.context.fillStyle="#FFFFFF",this.context.textAlign="center",this.context.save(),this.context.fillText("Score",75,60),this.context.restore(),this.context.font="35px Arial",this.context.fillStyle="#FFFFFF",this.context.textAlign="center",this.context.save(),this.context.fillText("".concat(this.score),75,100),this.context.restore()},t}(n(758).BaseCanvas);t.Score=r},115:function(o,t,n){var e=this&&this.__createBinding||(Object.create?function(o,t,n,e){void 0===e&&(e=n),Object.defineProperty(o,e,{enumerable:!0,get:function(){return t[n]}})}:function(o,t,n,e){void 0===e&&(e=n),o[e]=t[n]}),i=this&&this.__exportStar||function(o,t){for(var n in o)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||e(t,o,n)};Object.defineProperty(t,"__esModule",{value:!0}),i(n(362),t)},871:function(o,t,n){var e,i=this&&this.__extends||(e=function(o,t){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(o,t){o.__proto__=t}||function(o,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(o[n]=t[n])},e(o,t)},function(o,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=o}e(o,t),o.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),r=this&&this.__spreadArray||function(o,t,n){if(n||2===arguments.length)for(var e,i=0,r=t.length;i<r;i++)!e&&i in t||(e||(e=Array.prototype.slice.call(t,0,i)),e[i]=t[i]);return o.concat(e||Array.prototype.slice.call(t))};Object.defineProperty(t,"__esModule",{value:!0}),t.Tetris=void 0;var a=n(166),l=n(668),c=function(o){function t(){var t=null!==o&&o.apply(this,arguments)||this;return t.data=new Array(t._column).fill(null).map((function(o,n){return new Array(t._row).fill(null).map((function(o,t){return{x:t,y:n,strokeColor:"",fillColor:"",state:a.BlockState.Unfilled}}))})),t}return i(t,o),Object.defineProperty(t.prototype,"_row",{get:function(){return this.width/a.BlcokDistance},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"_column",{get:function(){return this.height/a.BlcokDistance},enumerable:!1,configurable:!0}),t.prototype.findBlock=function(o){var t=null;try{t=this.data[o.y][o.x]}catch(o){console.warn(o)}return t},t.prototype.getFilledRowInedxList=function(){return this.data.reduce((function(o,t,n){return t.every((function(o){return o.state===a.BlockState.Filled}))&&o.push(n),o}),[])},t.prototype.placePolyominoToCenterTop=function(){var o=this.polyomino,t=o.range,n=t.minX,e=t.maxX,i=t.minY,r=o.anchor.y;this.polyomino.updateCoordinate({x:Math.ceil((this._row-(e-n+1))/2)-n,y:r-i}),this.draw()},t.prototype.placePolyominoToPreview=function(){var o=this.getPolyominoPreviewCollideCoordinate(),t=this.polyomino.calcAnchorByCoordinateAndShape(o,this.polyomino.shape);this.polyomino.updateCoordinate(t),this.draw()},t.prototype.setPolyomino=function(o){this.polyomino||(this.polyomino=o)},t.prototype.resetPolyomino=function(){this.polyomino=null},t.prototype.draw=function(){var o=this;this.context.clearRect(0,0,this.width,this.height),this.context.fillStyle="#292929",this.context.fillRect(0,0,this.width,this.height);var t=this.polyomino?this.polyomino.info:null,n=this.getPolyominoPreviewCollideCoordinate(),e=n?this.polyomino.calcInfo(n):null;this.data.forEach((function(n){n.forEach((function(n){var i,r,l,c,s=n.x,y=n.y,h=n.strokeColor,u=n.fillColor,p=n.state;t&&(l=t.find((function(o){return o.x===s&&o.y===y}))),e&&(c=e.find((function(o){return o.x===s&&o.y===y}))),l?(i=l.strokeColor,r=l.fillColor):c?(i=c.strokeColor,r=c.fillColor):p===a.BlockState.Filled&&(i=h,r=u),i&&r&&(o.context.strokeStyle=i,o.context.fillStyle=r,o.context.save(),o.context.globalAlpha=c&&!l?.3:1,o.context.fillRect(s*a.BlcokDistance,y*a.BlcokDistance,a.BlcokDistance-2,a.BlcokDistance-2),o.context.strokeRect(s*a.BlcokDistance,y*a.BlcokDistance,a.BlcokDistance,a.BlcokDistance),o.context.restore())}))}))},t.prototype.clearFilledRow=function(){var o=this,t=0,n=[[4,5],[3,6],[2,7],[1,8],[0,9]],e=this.getFilledRowInedxList();return new Promise((function(i){(0,l.useInterval)((function(){e.forEach((function(e){n[t].forEach((function(t){o.data[e][t].state=a.BlockState.Unfilled,o.data[e][t].strokeColor="",o.data[e][t].fillColor=""}))})),o.draw(),t+=1}),50,n.length,!0).then((function(){i()}))}))},t.prototype.fillEmptyRow=function(){var o=this;return new Promise((function(t){var n=function(){for(var t=0,n=[],e=o.data.length-1;e>=0;e--){var i=o.data[e].every((function(o){return o.state===a.BlockState.Unfilled})),r=(o.data[e+1]||[]).every((function(o){return o.state===a.BlockState.Unfilled}));o.data[e+1]&&!r&&i&&(t+=1),n[t]||(n[t]={unFilled:[],notAllFilled:[]});var l=i?"unFilled":"notAllFilled";n[t][l].push(e)}return n}();2===n.length&&0===n[0].unFilled.length&&Math.min.apply(Math,n[0].notAllFilled)-1===Math.max.apply(Math,n[1].unFilled)?t():t((0,l.useInterval)((function(t){n.forEach((function(n){var e=n.unFilled,i=n.notAllFilled,r=Math.max.apply(Math,i),l=Math.max.apply(Math,e)-r;i.length>0&&e.length>0&&(i.forEach((function(t){o.data[t].forEach((function(o){return o.y=o.y+l/10}))})),10==t&&i.forEach((function(t){o.data[t+l].forEach((function(n,e){n.fillColor=o.data[t][e].fillColor,n.strokeColor=o.data[t][e].strokeColor,n.state=o.data[t][e].state})),o.data[t].forEach((function(o){o.y=t,o.fillColor="",o.strokeColor="",o.state=a.BlockState.Unfilled}))})))})),o.draw()}),16.66666666,10,!0).then((function(){o.fillEmptyRow()})))}))},t.prototype.changePolyominoShape=function(){var o=this,t=!1;if(this.polyomino){for(var n=Object.values(a.PolyominoShape),e=this.polyomino,i=e.shape,r=e.anchor,l=n.indexOf(i),c=n[(l+1)%n.length],s=!0,y=!1,h=0,u=this.polyomino.calcCoordinateByAnchorandShape(r,c),p=this.polyomino.calcAnchorByCoordinateAndShape(u,c),f=function(){var t=!1,n=!1,e=!1,i=!1;if(u.forEach((function(r){var l=(o.findBlock(r)||{}).state===a.BlockState.Filled,c=r.x<0||r.x>=o._row,s=r.y<0||r.y>=o._column;if(l||c)if(r.x>p.x)n=!0;else if(r.x<p.x)t=!0;else if(r.x===p.x){var y=o.polyomino.calcRangeByCoordinate(u),h=y.maxX,f=y.minX;r.x===h?n=!0:r.y===f&&(t=!0)}if(l||s)if(r.y>p.y)e=!0;else if(r.y<p.y)i=!0;else if(r.y===p.y){var d=o.polyomino.calcRangeByCoordinate(u),m=d.maxY,x=d.minY;r.y===m?e=!0:r.y===x&&(i=!0)}})),t||n||i||e||(s=!1),y=!(t&&n&&i),s&&y){var r=0,l=0;i?l+=1:e&&(l-=1),n?r-=1:t&&(r+=1),p={x:p.x+r,y:p.y+l},u=d.polyomino.calcCoordinateByAnchorandShape(p,c)}h+=1},d=this;h<10&&s;)f();!s&&y&&(this.polyomino.changeShape(c),this.polyomino.updateCoordinate(p),this.draw(),t=!0)}return t},t.prototype.syncPolyominoInfoToData=function(){var o=this;this.polyomino.info.forEach((function(t){var n=t.x,e=t.y,i=t.strokeColor,r=t.fillColor,l=o.findBlock({x:n,y:e});l&&(l.strokeColor=i,l.fillColor=r,l.state=a.BlockState.Filled)}))},t.prototype.getPolyominoPreviewCollideCoordinate=function(){var o=null;if(this.polyomino)for(var t=0;t<this._column-this.polyomino.anchor.y&&(o=this.polyomino.calcCoordinateByAnchorandShape({x:this.polyomino.anchor.x,y:this.polyomino.anchor.y+t},this.polyomino.shape),!this.getPolyominoCollideStatus(o).bottom);t++);return o},t.prototype.getPolyominoCollideStatus=function(o){var t=this,n=o||this.polyomino.coordinate,e={left:!1,right:!1,bottom:!1,top:!1};return n.reduce((function(o,t){var n=t.x,e=t.y;return r(r([],o,!0),[{left:{x:n-1,y:e},right:{x:n+1,y:e},bottom:{x:n,y:e+1},top:{x:n,y:e-1}}],!1)}),[]).forEach((function(o){(0,l.getKeys)(o).forEach((function(n){var i=o[n];if(("top"===n&&i.y<0||"bottom"===n&&i.y>=t._column||"left"===n&&i.x<0||"right"===n&&i.x>=t._row)&&(e[n]=!0),!e[n]){var r=t.findBlock({x:i.x,y:i.y});r&&r.state===a.BlockState.Filled&&(e[n]=!0)}}))})),e},t.prototype.movePolyomino=function(o){var t,n=!1,e=0,i=0,r=this.getPolyominoCollideStatus(),l=r.left,c=r.right,s=r.bottom;return(t={},t[a.Direction.Left]=function(){e=l?0:-1,n=!l},t[a.Direction.Right]=function(){e=c?0:1,n=!c},t[a.Direction.Down]=function(){i=s?0:1,n=!s},t)[o](),n&&(this.polyomino.updateCoordinate({x:this.polyomino.anchor.x+e,y:this.polyomino.anchor.y+i}),this.draw()),n},t}(n(758).BaseCanvas);t.Tetris=c},166:(o,t)=>{var n,e,i,r,a;Object.defineProperty(t,"__esModule",{value:!0}),t.BlockState=t.Canvas=t.BlcokDistance=t.Direction=t.PolyominoType=t.PolyominoShape=void 0,(a=t.PolyominoShape||(t.PolyominoShape={})).First="first",a.Second="second",a.Third="third",a.Forth="forth",(r=t.PolyominoType||(t.PolyominoType={}))[r.I=0]="I",r[r.J=1]="J",r[r.L=2]="L",r[r.O=3]="O",r[r.S=4]="S",r[r.T=5]="T",r[r.Z=6]="Z",(i=t.Direction||(t.Direction={})).Left="left",i.Right="right",i.Down="down",t.BlcokDistance=30,(e=t.Canvas||(t.Canvas={}))[e.Width=600]="Width",e[e.Height=1200]="Height",(n=t.BlockState||(t.BlockState={}))[n.Unfilled=0]="Unfilled",n[n.Filled=1]="Filled"},668:function(o,t){var n,e=this&&this.__extends||(n=function(o,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(o,t){o.__proto__=t}||function(o,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(o[n]=t[n])},n(o,t)},function(o,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function e(){this.constructor=o}n(o,t),o.prototype=null===t?Object.create(t):(e.prototype=t.prototype,new e)}),i=this&&this.__spreadArray||function(o,t,n){if(n||2===arguments.length)for(var e,i=0,r=t.length;i<r;i++)!e&&i in t||(e||(e=Array.prototype.slice.call(t,0,i)),e[i]=t[i]);return o.concat(e||Array.prototype.slice.call(t))};Object.defineProperty(t,"__esModule",{value:!0}),t.CountDownTimer=t.IntervalTimer=t.isNil=t.getKeyValue=t.getKeys=t.deepColne=t.useInterval=void 0,t.useInterval=function(o,t,n,e){void 0===t&&(t=3e3),void 0===n&&(n=1),void 0===e&&(e=!1);for(var r=[],a=4;a<arguments.length;a++)r[a-4]=arguments[a];var l,c=0,s=function(){c+=1,o.apply(null,i(i([],r,!0),[c],!1))};return new Promise((function(o){e&&s(),c>=n&&o(),l=window.setInterval((function(){s(),c>=n&&(window.clearInterval(l),o())}),t)}))},t.deepColne=function(o){return JSON.parse(JSON.stringify(o))},t.getKeys=function(o){return Object.keys(o)},t.getKeyValue=function(o,t){return o[t]},t.isNil=function(o){return null==o};var r=function(o,t){void 0===t&&(t=!1),this.timer=null,this.action=null,this.sec=o,this.overwritAble=t},a=function(o){function t(){return null!==o&&o.apply(this,arguments)||this}return e(t,o),t.prototype.create=function(){var o=this,t=function(){o.timer=window.setInterval((function(){o.action&&o.action()}),1e3*o.sec)};this.overwritAble?(this.close(),t()):this.timer||t()},t.prototype.start=function(o){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];this.action=function(){return o(t)},this.create()},t.prototype.continue=function(){},t.prototype.close=function(){this.timer&&(window.clearInterval(this.timer),this.timer=null)},t}(r);t.IntervalTimer=a;var l=function(o){function t(t,n){void 0===n&&(n=!1);var e=o.call(this,10*t,n)||this;return e.leftsec=0,e}return e(t,o),t.prototype.create=function(){var o=this,t=function(){o.timer=window.setInterval((function(){o.leftsec-=1,0===o.leftsec&&(o.action&&o.action(),o.leftsec=o.sec,o.close())}),100)};this.overwritAble?(this.close(),t()):this.timer||t()},t.prototype.start=function(o){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];this.action=function(){return o(t)},this.leftsec=this.sec,this.create()},t.prototype.continue=function(){this.action&&this.create()},t.prototype.close=function(){this.timer&&(window.clearInterval(this.timer),this.timer=null)},t}(r);t.CountDownTimer=l}},x={};function v(o){var t=x[o];if(void 0!==t)return t.exports;var n=x[o]={exports:{}};return m[o].call(n.exports,n,n.exports,v),n.exports}h=v(871),u=v(610),p=v(115),f=v(758),d=v(702),e=new f.BaseComponent({x:0,y:0,width:150,height:136,baseCanvasConstructor:p.Score}),l=(a=[i=new f.BaseComponent({x:e.width+2,y:0,width:300,height:600,baseCanvasConstructor:h.Tetris}),e,r=new f.BaseComponent({x:0,y:e.height+2,width:150,height:440,baseCanvasConstructor:d.LineUp})].map((function(o){var t=o.mount();return t.draw(),t})))[0],c=a[1],s=a[2],y=new u.Game(l,c,s),o=r.width+i.width,t=i.height,(n=document.querySelector("#canvas-container")).style.width="".concat(o,"px"),n.style.height="".concat(t,"px"),y.start(),window.addEventListener("keydown",(function(o){37===o.keyCode?y.movePolyominoLeft():39===o.keyCode?y.movePolyominoRight():40===o.keyCode?(y.closePolyominoAutoFall(),y.movePolyominoDown()):32===o.keyCode&&(y.closePolyominoAutoFall(),y.movePolyominoQuick())})),window.addEventListener("keyup",(function(o){38===o.keyCode?y.changePolyominoShape():40===o.keyCode&&y.startPolyominoAutoFall()})),window.t=y})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,